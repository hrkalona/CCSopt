# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.

package liberty;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
package libertyc;
bootstrap liberty;
package liberty;
@EXPORT = qw( );

# ---------- BASE METHODS -------------

package liberty;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package liberty;

*si2drPICreateGroup = *libertyc::si2drPICreateGroup;
*si2drGroupCreateAttr = *libertyc::si2drGroupCreateAttr;
*si2drAttrGetAttrType = *libertyc::si2drAttrGetAttrType;
*si2drAttrGetName = *libertyc::si2drAttrGetName;
*si2drComplexAttrAddInt32Value = *libertyc::si2drComplexAttrAddInt32Value;
*si2drComplexAttrAddStringValue = *libertyc::si2drComplexAttrAddStringValue;
*si2drComplexAttrAddBooleanValue = *libertyc::si2drComplexAttrAddBooleanValue;
*si2drComplexAttrAddFloat64Value = *libertyc::si2drComplexAttrAddFloat64Value;
*si2drComplexAttrAddExprValue = *libertyc::si2drComplexAttrAddExprValue;
*si2drComplexAttrGetValues = *libertyc::si2drComplexAttrGetValues;
*si2drIterNextComplex = *libertyc::si2drIterNextComplex;
*si2drComplexValGetValueType = *libertyc::si2drComplexValGetValueType;
*si2drComplexValGetInt32Value = *libertyc::si2drComplexValGetInt32Value;
*si2drComplexValGetFloat64Value = *libertyc::si2drComplexValGetFloat64Value;
*si2drComplexValGetStringValue = *libertyc::si2drComplexValGetStringValue;
*si2drComplexValGetBooleanValue = *libertyc::si2drComplexValGetBooleanValue;
*si2drComplexValGetExprValue = *libertyc::si2drComplexValGetExprValue;
*si2drSimpleAttrGetValueType = *libertyc::si2drSimpleAttrGetValueType;
*si2drSimpleAttrGetInt32Value = *libertyc::si2drSimpleAttrGetInt32Value;
*si2drSimpleAttrGetFloat64Value = *libertyc::si2drSimpleAttrGetFloat64Value;
*si2drSimpleAttrGetStringValue = *libertyc::si2drSimpleAttrGetStringValue;
*si2drSimpleAttrGetBooleanValue = *libertyc::si2drSimpleAttrGetBooleanValue;
*si2drSimpleAttrGetExprValue = *libertyc::si2drSimpleAttrGetExprValue;
*si2drSimpleAttrSetInt32Value = *libertyc::si2drSimpleAttrSetInt32Value;
*si2drSimpleAttrSetBooleanValue = *libertyc::si2drSimpleAttrSetBooleanValue;
*si2drSimpleAttrSetFloat64Value = *libertyc::si2drSimpleAttrSetFloat64Value;
*si2drSimpleAttrSetStringValue = *libertyc::si2drSimpleAttrSetStringValue;
*si2drSimpleAttrSetExprValue = *libertyc::si2drSimpleAttrSetExprValue;
*si2drSimpleAttrGetIsVar = *libertyc::si2drSimpleAttrGetIsVar;
*si2drSimpleAttrSetIsVar = *libertyc::si2drSimpleAttrSetIsVar;
*si2drExprDestroy = *libertyc::si2drExprDestroy;
*si2drCreateExpr = *libertyc::si2drCreateExpr;
*si2drCreateBooleanValExpr = *libertyc::si2drCreateBooleanValExpr;
*si2drCreateDoubleValExpr = *libertyc::si2drCreateDoubleValExpr;
*si2drCreateStringValExpr = *libertyc::si2drCreateStringValExpr;
*si2drCreateIntValExpr = *libertyc::si2drCreateIntValExpr;
*si2drCreateBinaryOpExpr = *libertyc::si2drCreateBinaryOpExpr;
*si2drCreateUnaryOpExpr = *libertyc::si2drCreateUnaryOpExpr;
*si2drExprToString = *libertyc::si2drExprToString;
*si2drExprGetType = *libertyc::si2drExprGetType;
*si2drValExprGetValueType = *libertyc::si2drValExprGetValueType;
*si2drIntValExprGetInt = *libertyc::si2drIntValExprGetInt;
*si2drDoubleValExprGetDouble = *libertyc::si2drDoubleValExprGetDouble;
*si2drBooleanValExprGetBoolean = *libertyc::si2drBooleanValExprGetBoolean;
*si2drStringValExprGetString = *libertyc::si2drStringValExprGetString;
*si2drOpExprGetLeftExpr = *libertyc::si2drOpExprGetLeftExpr;
*si2drOpExprGetRightExpr = *libertyc::si2drOpExprGetRightExpr;
*si2drGroupCreateDefine = *libertyc::si2drGroupCreateDefine;
*si2drDefineGetInfo = *libertyc::si2drDefineGetInfo;
*si2drGroupCreateGroup = *libertyc::si2drGroupCreateGroup;
*si2drGroupGetGroupType = *libertyc::si2drGroupGetGroupType;
*si2drGroupGetComment = *libertyc::si2drGroupGetComment;
*si2drGroupSetComment = *libertyc::si2drGroupSetComment;
*si2drAttrGetComment = *libertyc::si2drAttrGetComment;
*si2drAttrSetComment = *libertyc::si2drAttrSetComment;
*si2drDefineGetComment = *libertyc::si2drDefineGetComment;
*si2drDefineSetComment = *libertyc::si2drDefineSetComment;
*si2drGroupAddName = *libertyc::si2drGroupAddName;
*si2drGroupDeleteName = *libertyc::si2drGroupDeleteName;
*si2drPIFindGroupByName = *libertyc::si2drPIFindGroupByName;
*si2drGroupFindGroupByName = *libertyc::si2drGroupFindGroupByName;
*si2drGroupFindAttrByName = *libertyc::si2drGroupFindAttrByName;
*si2drGroupFindDefineByName = *libertyc::si2drGroupFindDefineByName;
*si2drPIFindDefineByName = *libertyc::si2drPIFindDefineByName;
*si2drPIGetGroups = *libertyc::si2drPIGetGroups;
*si2drGroupGetGroups = *libertyc::si2drGroupGetGroups;
*si2drGroupGetNames = *libertyc::si2drGroupGetNames;
*si2drGroupGetAttrs = *libertyc::si2drGroupGetAttrs;
*si2drGroupGetDefines = *libertyc::si2drGroupGetDefines;
*si2drIterNextGroup = *libertyc::si2drIterNextGroup;
*si2drIterNextName = *libertyc::si2drIterNextName;
*si2drIterNextAttr = *libertyc::si2drIterNextAttr;
*si2drIterNextDefine = *libertyc::si2drIterNextDefine;
*si2drIterQuit = *libertyc::si2drIterQuit;
*si2drObjectDelete = *libertyc::si2drObjectDelete;
*si2drPIGetErrorText = *libertyc::si2drPIGetErrorText;
*si2drPIGetNullId = *libertyc::si2drPIGetNullId;
*si2drPIInit = *libertyc::si2drPIInit;
*si2drPIQuit = *libertyc::si2drPIQuit;
*si2drObjectGetObjectType = *libertyc::si2drObjectGetObjectType;
*si2drObjectGetOwner = *libertyc::si2drObjectGetOwner;
*si2drObjectIsNull = *libertyc::si2drObjectIsNull;
*si2drObjectIsSame = *libertyc::si2drObjectIsSame;
*si2drObjectIsUsable = *libertyc::si2drObjectIsUsable;
*si2drObjectSetFileName = *libertyc::si2drObjectSetFileName;
*si2drObjectSetLineNo = *libertyc::si2drObjectSetLineNo;
*si2drObjectGetLineNo = *libertyc::si2drObjectGetLineNo;
*si2drObjectGetFileName = *libertyc::si2drObjectGetFileName;
*si2drReadLibertyFile = *libertyc::si2drReadLibertyFile;
*si2drWriteLibertyFile = *libertyc::si2drWriteLibertyFile;
*si2drCheckLibertyLibrary = *libertyc::si2drCheckLibertyLibrary;
*si2drPIGetTraceMode = *libertyc::si2drPIGetTraceMode;
*si2drPIUnSetTraceMode = *libertyc::si2drPIUnSetTraceMode;
*si2drPISetTraceMode = *libertyc::si2drPISetTraceMode;
*si2drPISetDebugMode = *libertyc::si2drPISetDebugMode;
*si2drPIUnSetDebugMode = *libertyc::si2drPIUnSetDebugMode;
*si2drPIGetDebugMode = *libertyc::si2drPIGetDebugMode;
*si2drPISetNocheckMode = *libertyc::si2drPISetNocheckMode;
*si2drPIUnSetNocheckMode = *libertyc::si2drPIUnSetNocheckMode;
*si2drPIGetNocheckMode = *libertyc::si2drPIGetNocheckMode;
*si2drGroupMoveAfter = *libertyc::si2drGroupMoveAfter;
*si2drGroupMoveBefore = *libertyc::si2drGroupMoveBefore;
*liberty_get_element = *libertyc::liberty_get_element;
*liberty_destroy_value_data = *libertyc::liberty_destroy_value_data;
*liberty_get_values_data = *libertyc::liberty_get_values_data;

############# Class : liberty::si2ObjectIdT ##############

package liberty::si2ObjectIdT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( liberty );
%OWNER = ();
%ITERATORS = ();
*swig_v1_get = *libertyc::si2ObjectIdT_v1_get;
*swig_v1_set = *libertyc::si2ObjectIdT_v1_set;
*swig_v2_get = *libertyc::si2ObjectIdT_v2_get;
*swig_v2_set = *libertyc::si2ObjectIdT_v2_set;
sub new {
    my $pkg = shift;
    my $self = libertyc::new_si2ObjectIdT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libertyc::delete_si2ObjectIdT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : liberty::si2drExprT ##############

package liberty::si2drExprT;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( liberty );
%OWNER = ();
%ITERATORS = ();
*swig_type_get = *libertyc::si2drExprT_type_get;
*swig_type_set = *libertyc::si2drExprT_type_set;
*swig_valuetype_get = *libertyc::si2drExprT_valuetype_get;
*swig_valuetype_set = *libertyc::si2drExprT_valuetype_set;
*swig_left_get = *libertyc::si2drExprT_left_get;
*swig_left_set = *libertyc::si2drExprT_left_set;
*swig_right_get = *libertyc::si2drExprT_right_get;
*swig_right_set = *libertyc::si2drExprT_right_set;
*swig_u_get = *libertyc::si2drExprT_u_get;
*swig_u_set = *libertyc::si2drExprT_u_set;
sub new {
    my $pkg = shift;
    my $self = libertyc::new_si2drExprT(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libertyc::delete_si2drExprT($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : liberty::si2drExprT_u ##############

package liberty::si2drExprT_u;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( liberty );
%OWNER = ();
%ITERATORS = ();
*swig_i_get = *libertyc::si2drExprT_u_i_get;
*swig_i_set = *libertyc::si2drExprT_u_i_set;
*swig_d_get = *libertyc::si2drExprT_u_d_get;
*swig_d_set = *libertyc::si2drExprT_u_d_set;
*swig_s_get = *libertyc::si2drExprT_u_s_get;
*swig_s_set = *libertyc::si2drExprT_u_s_set;
*swig_b_get = *libertyc::si2drExprT_u_b_get;
*swig_b_set = *libertyc::si2drExprT_u_b_set;
sub new {
    my $pkg = shift;
    my $self = libertyc::new_si2drExprT_u(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libertyc::delete_si2drExprT_u($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : liberty::liberty_value_data ##############

package liberty::liberty_value_data;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( liberty );
%OWNER = ();
%ITERATORS = ();
*swig_dimensions_get = *libertyc::liberty_value_data_dimensions_get;
*swig_dimensions_set = *libertyc::liberty_value_data_dimensions_set;
*swig_dim_sizes_get = *libertyc::liberty_value_data_dim_sizes_get;
*swig_dim_sizes_set = *libertyc::liberty_value_data_dim_sizes_set;
*swig_index_info_get = *libertyc::liberty_value_data_index_info_get;
*swig_index_info_set = *libertyc::liberty_value_data_index_info_set;
*swig_values_get = *libertyc::liberty_value_data_values_get;
*swig_values_set = *libertyc::liberty_value_data_values_set;
sub new {
    my $pkg = shift;
    my $self = libertyc::new_liberty_value_data(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        libertyc::delete_liberty_value_data($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package liberty;

*SI2_FALSE = *libertyc::SI2_FALSE;
*SI2_TRUE = *libertyc::SI2_TRUE;
*SI2_UNDEFINED_VALUETYPE = *libertyc::SI2_UNDEFINED_VALUETYPE;
*SI2_BOOLEAN = *libertyc::SI2_BOOLEAN;
*SI2_LONG = *libertyc::SI2_LONG;
*SI2_FLOAT = *libertyc::SI2_FLOAT;
*SI2_DOUBLE = *libertyc::SI2_DOUBLE;
*SI2_STRING = *libertyc::SI2_STRING;
*SI2_VOID = *libertyc::SI2_VOID;
*SI2_OID = *libertyc::SI2_OID;
*SI2_ITER = *libertyc::SI2_ITER;
*SI2_EXPR = *libertyc::SI2_EXPR;
*SI2_MAX_VALUETYPE = *libertyc::SI2_MAX_VALUETYPE;
*SI2_LONG_MAX = *libertyc::SI2_LONG_MAX;
*SI2_LONG_MIN = *libertyc::SI2_LONG_MIN;
*SI2_ULONG_MAX = *libertyc::SI2_ULONG_MAX;
*SI2DR_MIN_FLOAT32 = *libertyc::SI2DR_MIN_FLOAT32;
*SI2DR_MAX_FLOAT32 = *libertyc::SI2DR_MAX_FLOAT32;
*SI2DR_MIN_FLOAT64 = *libertyc::SI2DR_MIN_FLOAT64;
*SI2DR_MAX_FLOAT64 = *libertyc::SI2DR_MAX_FLOAT64;
*SI2DR_MIN_INT32 = *libertyc::SI2DR_MIN_INT32;
*SI2DR_MAX_INT32 = *libertyc::SI2DR_MAX_INT32;
*SI2DR_SEVERITY_NOTE = *libertyc::SI2DR_SEVERITY_NOTE;
*SI2DR_SEVERITY_WARN = *libertyc::SI2DR_SEVERITY_WARN;
*SI2DR_SEVERITY_ERR = *libertyc::SI2DR_SEVERITY_ERR;
*SI2DR_UNDEFINED_OBJECTTYPE = *libertyc::SI2DR_UNDEFINED_OBJECTTYPE;
*SI2DR_GROUP = *libertyc::SI2DR_GROUP;
*SI2DR_ATTR = *libertyc::SI2DR_ATTR;
*SI2DR_DEFINE = *libertyc::SI2DR_DEFINE;
*SI2DR_MAX_OBJECTTYPE = *libertyc::SI2DR_MAX_OBJECTTYPE;
*SI2DR_SIMPLE = *libertyc::SI2DR_SIMPLE;
*SI2DR_COMPLEX = *libertyc::SI2DR_COMPLEX;
*SI2DR_UNDEFINED_VALUETYPE = *libertyc::SI2DR_UNDEFINED_VALUETYPE;
*SI2DR_INT32 = *libertyc::SI2DR_INT32;
*SI2DR_STRING = *libertyc::SI2DR_STRING;
*SI2DR_FLOAT64 = *libertyc::SI2DR_FLOAT64;
*SI2DR_BOOLEAN = *libertyc::SI2DR_BOOLEAN;
*SI2DR_EXPR = *libertyc::SI2DR_EXPR;
*SI2DR_MAX_VALUETYPE = *libertyc::SI2DR_MAX_VALUETYPE;
*SI2DR_EXPR_VAL = *libertyc::SI2DR_EXPR_VAL;
*SI2DR_EXPR_OP_ADD = *libertyc::SI2DR_EXPR_OP_ADD;
*SI2DR_EXPR_OP_SUB = *libertyc::SI2DR_EXPR_OP_SUB;
*SI2DR_EXPR_OP_MUL = *libertyc::SI2DR_EXPR_OP_MUL;
*SI2DR_EXPR_OP_DIV = *libertyc::SI2DR_EXPR_OP_DIV;
*SI2DR_EXPR_OP_PAREN = *libertyc::SI2DR_EXPR_OP_PAREN;
*SI2DR_EXPR_OP_LOG2 = *libertyc::SI2DR_EXPR_OP_LOG2;
*SI2DR_EXPR_OP_LOG10 = *libertyc::SI2DR_EXPR_OP_LOG10;
*SI2DR_EXPR_OP_EXP = *libertyc::SI2DR_EXPR_OP_EXP;
*SI2DR_NO_ERROR = *libertyc::SI2DR_NO_ERROR;
*SI2DR_INTERNAL_SYSTEM_ERROR = *libertyc::SI2DR_INTERNAL_SYSTEM_ERROR;
*SI2DR_INVALID_VALUE = *libertyc::SI2DR_INVALID_VALUE;
*SI2DR_INVALID_NAME = *libertyc::SI2DR_INVALID_NAME;
*SI2DR_INVALID_OBJECTTYPE = *libertyc::SI2DR_INVALID_OBJECTTYPE;
*SI2DR_INVALID_ATTRTYPE = *libertyc::SI2DR_INVALID_ATTRTYPE;
*SI2DR_UNUSABLE_OID = *libertyc::SI2DR_UNUSABLE_OID;
*SI2DR_OBJECT_ALREADY_EXISTS = *libertyc::SI2DR_OBJECT_ALREADY_EXISTS;
*SI2DR_OBJECT_NOT_FOUND = *libertyc::SI2DR_OBJECT_NOT_FOUND;
*SI2DR_SYNTAX_ERROR = *libertyc::SI2DR_SYNTAX_ERROR;
*SI2DR_TRACE_FILES_CANNOT_BE_OPENED = *libertyc::SI2DR_TRACE_FILES_CANNOT_BE_OPENED;
*SI2DR_PIINIT_NOT_CALLED = *libertyc::SI2DR_PIINIT_NOT_CALLED;
*SI2DR_SEMANTIC_ERROR = *libertyc::SI2DR_SEMANTIC_ERROR;
*SI2DR_REFERENCE_ERROR = *libertyc::SI2DR_REFERENCE_ERROR;
*SI2DR_MAX_ERROR = *libertyc::SI2DR_MAX_ERROR;
1;
